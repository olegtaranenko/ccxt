import cexRest from '../cex.js';
import { Int, OrderSide, OrderType, Strings, Str } from '../base/types.js';
import Client from '../base/ws/Client.js';
export default class cex extends cexRest {
    describe(): any;
    requestId(): any;
    watchBalance(params?: {}): Promise<any>;
    handleBalance(client: Client, message: any): void;
    watchTrades(symbol: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    handleTradesSnapshot(client: Client, message: any): void;
    parseWsOldTrade(trade: any, market?: any): import("../base/types.js").Trade;
    handleTrade(client: Client, message: any): void;
    watchTicker(symbol: string, params?: {}): Promise<any>;
    watchTickers(symbols?: Strings, params?: {}): any;
    fetchTickerWs(symbol: string, params?: {}): Promise<any>;
    handleTicker(client: Client, message: any): void;
    parseWsTicker(ticker: any, market?: any): import("../base/types.js").Ticker;
    fetchBalanceWs(params?: {}): Promise<any>;
    watchOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    watchMyTrades(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<any>;
    handleTransaction(client: Client, message: any): void;
    handleMyTrades(client: Client, message: any): void;
    parseWsTrade(trade: any, market?: any): import("../base/types.js").Trade;
    handleOrderUpdate(client: Client, message: any): void;
    parseWsOrderUpdate(order: any, market?: any): import("../base/types.js").Order;
    fromPrecision(amount: any, scale: any): string;
    currencyFromPrecision(currency: any, amount: any): string;
    handleOrdersSnapshot(client: Client, message: any): void;
    watchOrderBook(symbol: string, limit?: Int, params?: {}): Promise<any>;
    handleOrderBookSnapshot(client: Client, message: any): void;
    pairToSymbol(pair: any): string;
    handleOrderBookUpdate(client: Client, message: any): void;
    handleDelta(bookside: any, delta: any): void;
    handleDeltas(bookside: any, deltas: any): void;
    watchOHLCV(symbol: string, timeframe?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    handleInitOHLCV(client: Client, message: any): void;
    handleOHLCV24(client: Client, message: any): any;
    handleOHLCV1m(client: Client, message: any): void;
    handleOHLCV(client: Client, message: any): void;
    fetchOrderWs(id: string, symbol?: string, params?: {}): Promise<import("../base/types.js").Order>;
    fetchOpenOrdersWs(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<import("../base/types.js").Order[]>;
    createOrderWs(symbol: string, type: OrderType, side: OrderSide, amount: number, price?: number, params?: {}): Promise<import("../base/types.js").Order>;
    editOrderWs(id: string, symbol: any, type: any, side: any, amount?: any, price?: any, params?: {}): Promise<import("../base/types.js").Order>;
    cancelOrderWs(id: string, symbol?: string, params?: {}): Promise<import("../base/types.js").Order>;
    cancelOrdersWs(ids: any, symbol?: string, params?: {}): Promise<import("../base/types.js").Order[]>;
    resolveData(client: Client, message: any): void;
    handleConnected(client: Client, message: any): any;
    handleErrorMessage(client: Client, message: any): void;
    handleMessage(client: Client, message: any): any;
    handleAuthenticationMessage(client: Client, message: any): void;
    authenticate(params?: {}): Promise<any>;
}
