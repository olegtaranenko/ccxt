import Exchange from './abstract/bybit.js';
import { Int, OrderSide } from './base/types.js';
export default class bybit extends Exchange {
    describe(): any;
    nonce(): number;
    isUnifiedEnabled(params?: {}): Promise<any[]>;
    upgradeUnifiedAccount(params?: {}): Promise<any>;
    upgradeUnifiedTradeAccount(params?: {}): Promise<any>;
    fetchTime(params?: {}): Promise<any>;
    fetchCurrencies(params?: {}): Promise<{}>;
    fetchMarkets(params?: {}): Promise<any>;
    fetchSpotMarkets(params: any): Promise<any[]>;
    fetchDerivativesMarkets(params: any): Promise<any[]>;
    parseTicker(ticker: any, market?: any): any;
    fetchTicker(symbol: string, params?: {}): Promise<any>;
    fetchTickers(symbols?: string[], params?: {}): Promise<any>;
    parseOHLCV(ohlcv: any, market?: any): any[];
    fetchOHLCV(symbol: string, timeframe?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseFundingRate(ticker: any, market?: any): {
        info: any;
        symbol: any;
        markPrice: any;
        indexPrice: any;
        interestRate: any;
        estimatedSettlePrice: any;
        timestamp: any;
        datetime: any;
        fundingRate: any;
        fundingTimestamp: any;
        fundingDatetime: any;
        nextFundingRate: any;
        nextFundingTimestamp: any;
        nextFundingDatetime: any;
        previousFundingRate: any;
        previousFundingTimestamp: any;
        previousFundingDatetime: any;
    };
    fetchFundingRates(symbols?: string[], params?: {}): Promise<any>;
    fetchFundingRateHistory(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseTrade(trade: any, market?: any): any;
    parseSpotTrade(trade: any, market?: any): any;
    parseContractTrade(trade: any, market?: any): any;
    fetchTrades(symbol: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchOrderBook(symbol: string, limit?: Int, params?: {}): Promise<any>;
    parseBalance(response: any): any;
    fetchBalance(params?: {}): Promise<any>;
    parseOrderStatus(status: any): any;
    parseTimeInForce(timeInForce: any): any;
    parseOrder(order: any, market?: any): any;
    parseContractOrder(order: any, market?: any): any;
    parseSpotOrder(order: any, market?: any): any;
    fetchOrder(id: string, symbol?: string, params?: {}): Promise<any>;
    createOrder(symbol: string, type: any, side: OrderSide, amount: any, price?: any, params?: {}): Promise<any>;
    createUnifiedAccountOrder(symbol: string, type: any, side: any, amount: any, price?: any, params?: {}): Promise<any>;
    createSpotOrder(symbol: string, type: any, side: any, amount: any, price?: any, params?: {}): Promise<any>;
    createUnifiedMarginOrder(symbol: string, type: any, side: any, amount: any, price?: any, params?: {}): Promise<any>;
    createContractV3Order(symbol: string, type: any, side: any, amount: any, price?: any, params?: {}): Promise<any>;
    createUsdcOrder(symbol: string, type: any, side: any, amount: any, price?: any, params?: {}): Promise<any>;
    editUnifiedAccountOrder(id: string, symbol: any, type: any, side: any, amount?: any, price?: any, params?: {}): Promise<{
        info: any;
        id: any;
    }>;
    editUnifiedMarginOrder(id: string, symbol: any, type: any, side: any, amount: any, price?: any, params?: {}): Promise<any>;
    editContractV3Order(id: string, symbol: any, type: any, side: any, amount?: any, price?: any, params?: {}): Promise<{
        info: any;
        id: any;
    }>;
    editOrder(id: string, symbol: any, type: any, side: any, amount?: any, price?: any, params?: {}): Promise<any>;
    cancelUnifiedAccountOrder(id: string, symbol?: string, params?: {}): Promise<any>;
    cancelSpotOrder(id: string, symbol?: string, params?: {}): Promise<any>;
    cancelUnifiedMarginOrder(id: string, symbol?: string, params?: {}): Promise<any>;
    cancelUSDCOrder(id: string, symbol?: string, params?: {}): Promise<any>;
    cancelDerivativesOrder(id: string, symbol?: string, params?: {}): Promise<any>;
    cancelOrder(id: string, symbol?: string, params?: {}): Promise<any>;
    cancelAllUnifiedAccountOrders(symbol?: string, params?: {}): Promise<any>;
    cancelAllSpotOrders(symbol?: string, params?: {}): Promise<any>;
    cancelAllUnifiedMarginOrders(symbol?: string, params?: {}): Promise<any>;
    cancelAllUSDCOrders(symbol?: string, params?: {}): Promise<any>;
    cancelAllDerivativesOrders(symbol?: string, params?: {}): Promise<any>;
    cancelAllOrders(symbol?: string, params?: {}): Promise<any>;
    fetchUnifiedAccountOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchUnifiedMarginOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchDerivativesOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchSpotClosedOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchClosedOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchCanceledOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchUnifiedAccountOpenOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchSpotOpenOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchUnifiedMarginOpenOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchDerivativesOpenOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchUSDCOpenOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchOpenOrders(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchOrderTrades(id: string, symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchMyUnifiedTrades(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchMySpotTrades(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchMyUnifiedMarginTrades(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchMyContractTrades(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchMyUsdcTrades(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchMyTrades(symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseDepositAddress(depositAddress: any, currency?: any): {
        currency: any;
        address: any;
        tag: any;
        network: any;
        info: any;
    };
    fetchDepositAddressesByNetwork(code: string, params?: {}): Promise<any>;
    fetchDepositAddress(code: string, params?: {}): Promise<{
        currency: any;
        address: any;
        tag: any;
        network: any;
        info: any;
    }>;
    fetchDeposits(code?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchWithdrawals(code?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseTransactionStatus(status: any): any;
    parseTransaction(transaction: any, currency?: any): {
        info: any;
        id: any;
        txid: any;
        timestamp: any;
        datetime: any;
        network: any;
        address: any;
        addressTo: any;
        addressFrom: any;
        tag: any;
        tagTo: any;
        tagFrom: any;
        type: string;
        amount: any;
        currency: any;
        status: any;
        updated: any;
        fee: any;
    };
    fetchLedger(code?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseLedgerEntry(item: any, currency?: any): {
        id: any;
        currency: any;
        account: any;
        referenceAccount: any;
        referenceId: any;
        status: any;
        amount: any;
        before: any;
        after: any;
        fee: any;
        direction: string;
        timestamp: any;
        datetime: any;
        type: any;
        info: any;
    };
    parseLedgerEntryType(type: any): any;
    withdraw(code: string, amount: any, address: any, tag?: any, params?: {}): Promise<{
        info: any;
        id: any;
        txid: any;
        timestamp: any;
        datetime: any;
        network: any;
        address: any;
        addressTo: any;
        addressFrom: any;
        tag: any;
        tagTo: any;
        tagFrom: any;
        type: string;
        amount: any;
        currency: any;
        status: any;
        updated: any;
        fee: any;
    }>;
    fetchPosition(symbol: string, params?: {}): Promise<any>;
    fetchUnifiedPositions(symbols?: string[], params?: {}): Promise<any>;
    fetchUSDCPositions(symbols?: string[], params?: {}): Promise<any>;
    fetchDerivativesPositions(symbols?: string[], params?: {}): Promise<any>;
    fetchPositions(symbols?: string[], params?: {}): Promise<any>;
    parsePosition(position: any, market?: any): any;
    setMarginMode(marginMode: any, symbol?: string, params?: {}): Promise<any>;
    setUnifiedMarginMode(marginMode: any, symbol?: string, params?: {}): Promise<any>;
    setDerivativesMarginMode(marginMode: any, symbol?: string, params?: {}): Promise<any>;
    setLeverage(leverage: any, symbol?: string, params?: {}): Promise<any>;
    setPositionMode(hedged: any, symbol?: string, params?: {}): Promise<any>;
    fetchDerivativesOpenInterestHistory(symbol: string, timeframe?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    fetchOpenInterest(symbol: string, params?: {}): Promise<{
        symbol: any;
        openInterestAmount: any;
        openInterestValue: any;
        timestamp: any;
        datetime: any;
        info: any;
    }>;
    fetchOpenInterestHistory(symbol: string, timeframe?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseOpenInterest(interest: any, market?: any): {
        symbol: any;
        openInterestAmount: any;
        openInterestValue: any;
        timestamp: any;
        datetime: any;
        info: any;
    };
    fetchBorrowRate(code: string, params?: {}): Promise<{
        currency: any;
        rate: any;
        period: number;
        timestamp: any;
        datetime: any;
        info: any;
    }>;
    parseBorrowRate(info: any, currency?: any): {
        currency: any;
        rate: any;
        period: number;
        timestamp: any;
        datetime: any;
        info: any;
    };
    fetchBorrowInterest(code?: string, symbol?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    parseBorrowInterest(info: any, market?: any): {
        symbol: any;
        marginMode: string;
        currency: any;
        interest: any;
        interestRate: any;
        amountBorrowed: any;
        timestamp: any;
        datetime: any;
        info: any;
    };
    transfer(code: string, amount: any, fromAccount: any, toAccount: any, params?: {}): Promise<any>;
    fetchTransfers(code?: string, since?: Int, limit?: Int, params?: {}): Promise<any>;
    borrowMargin(code: string, amount: any, symbol?: string, params?: {}): Promise<any>;
    repayMargin(code: string, amount: any, symbol?: string, params?: {}): Promise<any>;
    parseMarginLoan(info: any, currency?: any): {
        id: any;
        currency: any;
        amount: any;
        symbol: any;
        timestamp: any;
        datetime: any;
        info: any;
    };
    parseTransferStatus(status: any): any;
    parseTransfer(transfer: any, currency?: any): {
        info: any;
        id: any;
        timestamp: any;
        datetime: any;
        currency: any;
        amount: any;
        fromAccount: any;
        toAccount: any;
        status: any;
    };
    fetchDerivativesMarketLeverageTiers(symbol: string, params?: {}): Promise<any[]>;
    fetchMarketLeverageTiers(symbol: string, params?: {}): Promise<any[]>;
    parseMarketLeverageTiers(info: any, market?: any): any[];
    parseTradingFee(fee: any, market?: any): {
        info: any;
        symbol: any;
        maker: any;
        taker: any;
    };
    fetchTradingFee(symbol: string, params?: {}): Promise<{
        info: any;
        symbol: any;
        maker: any;
        taker: any;
    }>;
    fetchTradingFees(params?: {}): Promise<{}>;
    sign(path: any, api?: string, method?: string, params?: {}, headers?: any, body?: any): {
        url: string;
        method: string;
        body: any;
        headers: any;
    };
    handleErrors(httpCode: any, reason: any, url: any, method: any, headers: any, body: any, response: any, requestHeaders: any, requestBody: any): any;
}
